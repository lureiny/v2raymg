// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rpc_server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndNodeAccessClient is the client API for EndNodeAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndNodeAccessClient interface {
	// user
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersRsp, error)
	AddUsers(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error)
	DeleteUsers(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error)
	UpdateUsers(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error)
	ResetUser(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error)
	GetSub(ctx context.Context, in *GetSubReq, opts ...grpc.CallOption) (*GetSubRsp, error)
	GetBandWidthStats(ctx context.Context, in *GetBandwidthStatsReq, opts ...grpc.CallOption) (*GetBandwidthStatsRsp, error)
	// system
	HeartBeat(ctx context.Context, in *HeartBeatReq, opts ...grpc.CallOption) (*HeartBeatRsp, error)
	RegisterNode(ctx context.Context, in *RegisterNodeReq, opts ...grpc.CallOption) (*RegisterNodeRsp, error)
	SetGatewayModel(ctx context.Context, in *SetGatewayModelReq, opts ...grpc.CallOption) (*SetGatewayModelRsp, error)
	// inbound
	AddInbound(ctx context.Context, in *InboundOpReq, opts ...grpc.CallOption) (*InboundOpRsp, error)
	DeleteInbound(ctx context.Context, in *InboundOpReq, opts ...grpc.CallOption) (*InboundOpRsp, error)
	TransferInbound(ctx context.Context, in *TransferInboundReq, opts ...grpc.CallOption) (*InboundOpRsp, error)
	CopyInbound(ctx context.Context, in *CopyInboundReq, opts ...grpc.CallOption) (*InboundOpRsp, error)
	CopyUser(ctx context.Context, in *CopyUserReq, opts ...grpc.CallOption) (*InboundOpRsp, error)
	GetInbound(ctx context.Context, in *GetInboundReq, opts ...grpc.CallOption) (*GetInboundRsp, error)
	GetTag(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagRsp, error)
	// proxy
	UpdateProxy(ctx context.Context, in *UpdateProxyReq, opts ...grpc.CallOption) (*UpdateProxyRsp, error)
	AddAdaptiveConfig(ctx context.Context, in *AdaptiveOpReq, opts ...grpc.CallOption) (*AdaptiveRsp, error)
	DeleteAdaptiveConfig(ctx context.Context, in *AdaptiveOpReq, opts ...grpc.CallOption) (*AdaptiveRsp, error)
	Adaptive(ctx context.Context, in *AdaptiveReq, opts ...grpc.CallOption) (*AdaptiveRsp, error)
	FastAddInbound(ctx context.Context, in *FastAddInboundReq, opts ...grpc.CallOption) (*FastAddInboundRsp, error)
	// cert
	ObtainNewCert(ctx context.Context, in *ObtainNewCertReq, opts ...grpc.CallOption) (*ObtainNewCertRsp, error)
	TransferCert(ctx context.Context, in *TransferCertReq, opts ...grpc.CallOption) (*TransferCertRsp, error)
	GetCerts(ctx context.Context, in *GetCertsReq, opts ...grpc.CallOption) (*GetCertsRsp, error)
}

type endNodeAccessClient struct {
	cc grpc.ClientConnInterface
}

func NewEndNodeAccessClient(cc grpc.ClientConnInterface) EndNodeAccessClient {
	return &endNodeAccessClient{cc}
}

func (c *endNodeAccessClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*GetUsersRsp, error) {
	out := new(GetUsersRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) AddUsers(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error) {
	out := new(UserOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/AddUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) DeleteUsers(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error) {
	out := new(UserOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) UpdateUsers(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error) {
	out := new(UserOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/UpdateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) ResetUser(ctx context.Context, in *UserOpReq, opts ...grpc.CallOption) (*UserOpRsp, error) {
	out := new(UserOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/ResetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) GetSub(ctx context.Context, in *GetSubReq, opts ...grpc.CallOption) (*GetSubRsp, error) {
	out := new(GetSubRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/GetSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) GetBandWidthStats(ctx context.Context, in *GetBandwidthStatsReq, opts ...grpc.CallOption) (*GetBandwidthStatsRsp, error) {
	out := new(GetBandwidthStatsRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/GetBandWidthStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) HeartBeat(ctx context.Context, in *HeartBeatReq, opts ...grpc.CallOption) (*HeartBeatRsp, error) {
	out := new(HeartBeatRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) RegisterNode(ctx context.Context, in *RegisterNodeReq, opts ...grpc.CallOption) (*RegisterNodeRsp, error) {
	out := new(RegisterNodeRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) SetGatewayModel(ctx context.Context, in *SetGatewayModelReq, opts ...grpc.CallOption) (*SetGatewayModelRsp, error) {
	out := new(SetGatewayModelRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/SetGatewayModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) AddInbound(ctx context.Context, in *InboundOpReq, opts ...grpc.CallOption) (*InboundOpRsp, error) {
	out := new(InboundOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/AddInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) DeleteInbound(ctx context.Context, in *InboundOpReq, opts ...grpc.CallOption) (*InboundOpRsp, error) {
	out := new(InboundOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/DeleteInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) TransferInbound(ctx context.Context, in *TransferInboundReq, opts ...grpc.CallOption) (*InboundOpRsp, error) {
	out := new(InboundOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/TransferInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) CopyInbound(ctx context.Context, in *CopyInboundReq, opts ...grpc.CallOption) (*InboundOpRsp, error) {
	out := new(InboundOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/CopyInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) CopyUser(ctx context.Context, in *CopyUserReq, opts ...grpc.CallOption) (*InboundOpRsp, error) {
	out := new(InboundOpRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/CopyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) GetInbound(ctx context.Context, in *GetInboundReq, opts ...grpc.CallOption) (*GetInboundRsp, error) {
	out := new(GetInboundRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/GetInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) GetTag(ctx context.Context, in *GetTagReq, opts ...grpc.CallOption) (*GetTagRsp, error) {
	out := new(GetTagRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) UpdateProxy(ctx context.Context, in *UpdateProxyReq, opts ...grpc.CallOption) (*UpdateProxyRsp, error) {
	out := new(UpdateProxyRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/UpdateProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) AddAdaptiveConfig(ctx context.Context, in *AdaptiveOpReq, opts ...grpc.CallOption) (*AdaptiveRsp, error) {
	out := new(AdaptiveRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/AddAdaptiveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) DeleteAdaptiveConfig(ctx context.Context, in *AdaptiveOpReq, opts ...grpc.CallOption) (*AdaptiveRsp, error) {
	out := new(AdaptiveRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/DeleteAdaptiveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) Adaptive(ctx context.Context, in *AdaptiveReq, opts ...grpc.CallOption) (*AdaptiveRsp, error) {
	out := new(AdaptiveRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/Adaptive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) FastAddInbound(ctx context.Context, in *FastAddInboundReq, opts ...grpc.CallOption) (*FastAddInboundRsp, error) {
	out := new(FastAddInboundRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/FastAddInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) ObtainNewCert(ctx context.Context, in *ObtainNewCertReq, opts ...grpc.CallOption) (*ObtainNewCertRsp, error) {
	out := new(ObtainNewCertRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/ObtainNewCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) TransferCert(ctx context.Context, in *TransferCertReq, opts ...grpc.CallOption) (*TransferCertRsp, error) {
	out := new(TransferCertRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/TransferCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endNodeAccessClient) GetCerts(ctx context.Context, in *GetCertsReq, opts ...grpc.CallOption) (*GetCertsRsp, error) {
	out := new(GetCertsRsp)
	err := c.cc.Invoke(ctx, "/proto.EndNodeAccess/GetCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndNodeAccessServer is the server API for EndNodeAccess service.
// All implementations must embed UnimplementedEndNodeAccessServer
// for forward compatibility
type EndNodeAccessServer interface {
	// user
	GetUsers(context.Context, *GetUsersReq) (*GetUsersRsp, error)
	AddUsers(context.Context, *UserOpReq) (*UserOpRsp, error)
	DeleteUsers(context.Context, *UserOpReq) (*UserOpRsp, error)
	UpdateUsers(context.Context, *UserOpReq) (*UserOpRsp, error)
	ResetUser(context.Context, *UserOpReq) (*UserOpRsp, error)
	GetSub(context.Context, *GetSubReq) (*GetSubRsp, error)
	GetBandWidthStats(context.Context, *GetBandwidthStatsReq) (*GetBandwidthStatsRsp, error)
	// system
	HeartBeat(context.Context, *HeartBeatReq) (*HeartBeatRsp, error)
	RegisterNode(context.Context, *RegisterNodeReq) (*RegisterNodeRsp, error)
	SetGatewayModel(context.Context, *SetGatewayModelReq) (*SetGatewayModelRsp, error)
	// inbound
	AddInbound(context.Context, *InboundOpReq) (*InboundOpRsp, error)
	DeleteInbound(context.Context, *InboundOpReq) (*InboundOpRsp, error)
	TransferInbound(context.Context, *TransferInboundReq) (*InboundOpRsp, error)
	CopyInbound(context.Context, *CopyInboundReq) (*InboundOpRsp, error)
	CopyUser(context.Context, *CopyUserReq) (*InboundOpRsp, error)
	GetInbound(context.Context, *GetInboundReq) (*GetInboundRsp, error)
	GetTag(context.Context, *GetTagReq) (*GetTagRsp, error)
	// proxy
	UpdateProxy(context.Context, *UpdateProxyReq) (*UpdateProxyRsp, error)
	AddAdaptiveConfig(context.Context, *AdaptiveOpReq) (*AdaptiveRsp, error)
	DeleteAdaptiveConfig(context.Context, *AdaptiveOpReq) (*AdaptiveRsp, error)
	Adaptive(context.Context, *AdaptiveReq) (*AdaptiveRsp, error)
	FastAddInbound(context.Context, *FastAddInboundReq) (*FastAddInboundRsp, error)
	// cert
	ObtainNewCert(context.Context, *ObtainNewCertReq) (*ObtainNewCertRsp, error)
	TransferCert(context.Context, *TransferCertReq) (*TransferCertRsp, error)
	GetCerts(context.Context, *GetCertsReq) (*GetCertsRsp, error)
	mustEmbedUnimplementedEndNodeAccessServer()
}

// UnimplementedEndNodeAccessServer must be embedded to have forward compatible implementations.
type UnimplementedEndNodeAccessServer struct {
}

func (UnimplementedEndNodeAccessServer) GetUsers(context.Context, *GetUsersReq) (*GetUsersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedEndNodeAccessServer) AddUsers(context.Context, *UserOpReq) (*UserOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedEndNodeAccessServer) DeleteUsers(context.Context, *UserOpReq) (*UserOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedEndNodeAccessServer) UpdateUsers(context.Context, *UserOpReq) (*UserOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsers not implemented")
}
func (UnimplementedEndNodeAccessServer) ResetUser(context.Context, *UserOpReq) (*UserOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUser not implemented")
}
func (UnimplementedEndNodeAccessServer) GetSub(context.Context, *GetSubReq) (*GetSubRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSub not implemented")
}
func (UnimplementedEndNodeAccessServer) GetBandWidthStats(context.Context, *GetBandwidthStatsReq) (*GetBandwidthStatsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBandWidthStats not implemented")
}
func (UnimplementedEndNodeAccessServer) HeartBeat(context.Context, *HeartBeatReq) (*HeartBeatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedEndNodeAccessServer) RegisterNode(context.Context, *RegisterNodeReq) (*RegisterNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedEndNodeAccessServer) SetGatewayModel(context.Context, *SetGatewayModelReq) (*SetGatewayModelRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGatewayModel not implemented")
}
func (UnimplementedEndNodeAccessServer) AddInbound(context.Context, *InboundOpReq) (*InboundOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInbound not implemented")
}
func (UnimplementedEndNodeAccessServer) DeleteInbound(context.Context, *InboundOpReq) (*InboundOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInbound not implemented")
}
func (UnimplementedEndNodeAccessServer) TransferInbound(context.Context, *TransferInboundReq) (*InboundOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferInbound not implemented")
}
func (UnimplementedEndNodeAccessServer) CopyInbound(context.Context, *CopyInboundReq) (*InboundOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyInbound not implemented")
}
func (UnimplementedEndNodeAccessServer) CopyUser(context.Context, *CopyUserReq) (*InboundOpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyUser not implemented")
}
func (UnimplementedEndNodeAccessServer) GetInbound(context.Context, *GetInboundReq) (*GetInboundRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInbound not implemented")
}
func (UnimplementedEndNodeAccessServer) GetTag(context.Context, *GetTagReq) (*GetTagRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedEndNodeAccessServer) UpdateProxy(context.Context, *UpdateProxyReq) (*UpdateProxyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProxy not implemented")
}
func (UnimplementedEndNodeAccessServer) AddAdaptiveConfig(context.Context, *AdaptiveOpReq) (*AdaptiveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdaptiveConfig not implemented")
}
func (UnimplementedEndNodeAccessServer) DeleteAdaptiveConfig(context.Context, *AdaptiveOpReq) (*AdaptiveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdaptiveConfig not implemented")
}
func (UnimplementedEndNodeAccessServer) Adaptive(context.Context, *AdaptiveReq) (*AdaptiveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adaptive not implemented")
}
func (UnimplementedEndNodeAccessServer) FastAddInbound(context.Context, *FastAddInboundReq) (*FastAddInboundRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastAddInbound not implemented")
}
func (UnimplementedEndNodeAccessServer) ObtainNewCert(context.Context, *ObtainNewCertReq) (*ObtainNewCertRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtainNewCert not implemented")
}
func (UnimplementedEndNodeAccessServer) TransferCert(context.Context, *TransferCertReq) (*TransferCertRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCert not implemented")
}
func (UnimplementedEndNodeAccessServer) GetCerts(context.Context, *GetCertsReq) (*GetCertsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCerts not implemented")
}
func (UnimplementedEndNodeAccessServer) mustEmbedUnimplementedEndNodeAccessServer() {}

// UnsafeEndNodeAccessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndNodeAccessServer will
// result in compilation errors.
type UnsafeEndNodeAccessServer interface {
	mustEmbedUnimplementedEndNodeAccessServer()
}

func RegisterEndNodeAccessServer(s grpc.ServiceRegistrar, srv EndNodeAccessServer) {
	s.RegisterService(&EndNodeAccess_ServiceDesc, srv)
}

func _EndNodeAccess_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).GetUsers(ctx, req.(*GetUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_AddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).AddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/AddUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).AddUsers(ctx, req.(*UserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).DeleteUsers(ctx, req.(*UserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_UpdateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).UpdateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/UpdateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).UpdateUsers(ctx, req.(*UserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_ResetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).ResetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/ResetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).ResetUser(ctx, req.(*UserOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_GetSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).GetSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/GetSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).GetSub(ctx, req.(*GetSubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_GetBandWidthStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBandwidthStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).GetBandWidthStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/GetBandWidthStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).GetBandWidthStats(ctx, req.(*GetBandwidthStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).HeartBeat(ctx, req.(*HeartBeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).RegisterNode(ctx, req.(*RegisterNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_SetGatewayModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).SetGatewayModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/SetGatewayModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).SetGatewayModel(ctx, req.(*SetGatewayModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_AddInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).AddInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/AddInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).AddInbound(ctx, req.(*InboundOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_DeleteInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboundOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).DeleteInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/DeleteInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).DeleteInbound(ctx, req.(*InboundOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_TransferInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInboundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).TransferInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/TransferInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).TransferInbound(ctx, req.(*TransferInboundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_CopyInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyInboundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).CopyInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/CopyInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).CopyInbound(ctx, req.(*CopyInboundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_CopyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).CopyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/CopyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).CopyUser(ctx, req.(*CopyUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_GetInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).GetInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/GetInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).GetInbound(ctx, req.(*GetInboundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).GetTag(ctx, req.(*GetTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_UpdateProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProxyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).UpdateProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/UpdateProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).UpdateProxy(ctx, req.(*UpdateProxyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_AddAdaptiveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdaptiveOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).AddAdaptiveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/AddAdaptiveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).AddAdaptiveConfig(ctx, req.(*AdaptiveOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_DeleteAdaptiveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdaptiveOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).DeleteAdaptiveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/DeleteAdaptiveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).DeleteAdaptiveConfig(ctx, req.(*AdaptiveOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_Adaptive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdaptiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).Adaptive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/Adaptive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).Adaptive(ctx, req.(*AdaptiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_FastAddInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastAddInboundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).FastAddInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/FastAddInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).FastAddInbound(ctx, req.(*FastAddInboundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_ObtainNewCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObtainNewCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).ObtainNewCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/ObtainNewCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).ObtainNewCert(ctx, req.(*ObtainNewCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_TransferCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).TransferCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/TransferCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).TransferCert(ctx, req.(*TransferCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndNodeAccess_GetCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndNodeAccessServer).GetCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndNodeAccess/GetCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndNodeAccessServer).GetCerts(ctx, req.(*GetCertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EndNodeAccess_ServiceDesc is the grpc.ServiceDesc for EndNodeAccess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndNodeAccess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EndNodeAccess",
	HandlerType: (*EndNodeAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _EndNodeAccess_GetUsers_Handler,
		},
		{
			MethodName: "AddUsers",
			Handler:    _EndNodeAccess_AddUsers_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _EndNodeAccess_DeleteUsers_Handler,
		},
		{
			MethodName: "UpdateUsers",
			Handler:    _EndNodeAccess_UpdateUsers_Handler,
		},
		{
			MethodName: "ResetUser",
			Handler:    _EndNodeAccess_ResetUser_Handler,
		},
		{
			MethodName: "GetSub",
			Handler:    _EndNodeAccess_GetSub_Handler,
		},
		{
			MethodName: "GetBandWidthStats",
			Handler:    _EndNodeAccess_GetBandWidthStats_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _EndNodeAccess_HeartBeat_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _EndNodeAccess_RegisterNode_Handler,
		},
		{
			MethodName: "SetGatewayModel",
			Handler:    _EndNodeAccess_SetGatewayModel_Handler,
		},
		{
			MethodName: "AddInbound",
			Handler:    _EndNodeAccess_AddInbound_Handler,
		},
		{
			MethodName: "DeleteInbound",
			Handler:    _EndNodeAccess_DeleteInbound_Handler,
		},
		{
			MethodName: "TransferInbound",
			Handler:    _EndNodeAccess_TransferInbound_Handler,
		},
		{
			MethodName: "CopyInbound",
			Handler:    _EndNodeAccess_CopyInbound_Handler,
		},
		{
			MethodName: "CopyUser",
			Handler:    _EndNodeAccess_CopyUser_Handler,
		},
		{
			MethodName: "GetInbound",
			Handler:    _EndNodeAccess_GetInbound_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _EndNodeAccess_GetTag_Handler,
		},
		{
			MethodName: "UpdateProxy",
			Handler:    _EndNodeAccess_UpdateProxy_Handler,
		},
		{
			MethodName: "AddAdaptiveConfig",
			Handler:    _EndNodeAccess_AddAdaptiveConfig_Handler,
		},
		{
			MethodName: "DeleteAdaptiveConfig",
			Handler:    _EndNodeAccess_DeleteAdaptiveConfig_Handler,
		},
		{
			MethodName: "Adaptive",
			Handler:    _EndNodeAccess_Adaptive_Handler,
		},
		{
			MethodName: "FastAddInbound",
			Handler:    _EndNodeAccess_FastAddInbound_Handler,
		},
		{
			MethodName: "ObtainNewCert",
			Handler:    _EndNodeAccess_ObtainNewCert_Handler,
		},
		{
			MethodName: "TransferCert",
			Handler:    _EndNodeAccess_TransferCert_Handler,
		},
		{
			MethodName: "GetCerts",
			Handler:    _EndNodeAccess_GetCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_server.proto",
}

// CenterNodeAdminClient is the client API for CenterNodeAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterNodeAdminClient interface {
	GetCluters(ctx context.Context, in *GetClutersReq, opts ...grpc.CallOption) (*GetClutersRsp, error)
	GetNodes(ctx context.Context, in *GetNodesReq, opts ...grpc.CallOption) (*GetNodesRsp, error)
}

type centerNodeAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterNodeAdminClient(cc grpc.ClientConnInterface) CenterNodeAdminClient {
	return &centerNodeAdminClient{cc}
}

func (c *centerNodeAdminClient) GetCluters(ctx context.Context, in *GetClutersReq, opts ...grpc.CallOption) (*GetClutersRsp, error) {
	out := new(GetClutersRsp)
	err := c.cc.Invoke(ctx, "/proto.CenterNodeAdmin/GetCluters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerNodeAdminClient) GetNodes(ctx context.Context, in *GetNodesReq, opts ...grpc.CallOption) (*GetNodesRsp, error) {
	out := new(GetNodesRsp)
	err := c.cc.Invoke(ctx, "/proto.CenterNodeAdmin/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterNodeAdminServer is the server API for CenterNodeAdmin service.
// All implementations must embed UnimplementedCenterNodeAdminServer
// for forward compatibility
type CenterNodeAdminServer interface {
	GetCluters(context.Context, *GetClutersReq) (*GetClutersRsp, error)
	GetNodes(context.Context, *GetNodesReq) (*GetNodesRsp, error)
	mustEmbedUnimplementedCenterNodeAdminServer()
}

// UnimplementedCenterNodeAdminServer must be embedded to have forward compatible implementations.
type UnimplementedCenterNodeAdminServer struct {
}

func (UnimplementedCenterNodeAdminServer) GetCluters(context.Context, *GetClutersReq) (*GetClutersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluters not implemented")
}
func (UnimplementedCenterNodeAdminServer) GetNodes(context.Context, *GetNodesReq) (*GetNodesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedCenterNodeAdminServer) mustEmbedUnimplementedCenterNodeAdminServer() {}

// UnsafeCenterNodeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterNodeAdminServer will
// result in compilation errors.
type UnsafeCenterNodeAdminServer interface {
	mustEmbedUnimplementedCenterNodeAdminServer()
}

func RegisterCenterNodeAdminServer(s grpc.ServiceRegistrar, srv CenterNodeAdminServer) {
	s.RegisterService(&CenterNodeAdmin_ServiceDesc, srv)
}

func _CenterNodeAdmin_GetCluters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClutersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterNodeAdminServer).GetCluters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterNodeAdmin/GetCluters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterNodeAdminServer).GetCluters(ctx, req.(*GetClutersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterNodeAdmin_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterNodeAdminServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterNodeAdmin/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterNodeAdminServer).GetNodes(ctx, req.(*GetNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterNodeAdmin_ServiceDesc is the grpc.ServiceDesc for CenterNodeAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterNodeAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CenterNodeAdmin",
	HandlerType: (*CenterNodeAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCluters",
			Handler:    _CenterNodeAdmin_GetCluters_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _CenterNodeAdmin_GetNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_server.proto",
}

// CenterNodeAccessClient is the client API for CenterNodeAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterNodeAccessClient interface {
	HeartBeat(ctx context.Context, in *HeartBeatReq, opts ...grpc.CallOption) (*HeartBeatRsp, error)
	RegisterNode(ctx context.Context, in *RegisterNodeReq, opts ...grpc.CallOption) (*RegisterNodeRsp, error)
}

type centerNodeAccessClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterNodeAccessClient(cc grpc.ClientConnInterface) CenterNodeAccessClient {
	return &centerNodeAccessClient{cc}
}

func (c *centerNodeAccessClient) HeartBeat(ctx context.Context, in *HeartBeatReq, opts ...grpc.CallOption) (*HeartBeatRsp, error) {
	out := new(HeartBeatRsp)
	err := c.cc.Invoke(ctx, "/proto.CenterNodeAccess/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerNodeAccessClient) RegisterNode(ctx context.Context, in *RegisterNodeReq, opts ...grpc.CallOption) (*RegisterNodeRsp, error) {
	out := new(RegisterNodeRsp)
	err := c.cc.Invoke(ctx, "/proto.CenterNodeAccess/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterNodeAccessServer is the server API for CenterNodeAccess service.
// All implementations must embed UnimplementedCenterNodeAccessServer
// for forward compatibility
type CenterNodeAccessServer interface {
	HeartBeat(context.Context, *HeartBeatReq) (*HeartBeatRsp, error)
	RegisterNode(context.Context, *RegisterNodeReq) (*RegisterNodeRsp, error)
	mustEmbedUnimplementedCenterNodeAccessServer()
}

// UnimplementedCenterNodeAccessServer must be embedded to have forward compatible implementations.
type UnimplementedCenterNodeAccessServer struct {
}

func (UnimplementedCenterNodeAccessServer) HeartBeat(context.Context, *HeartBeatReq) (*HeartBeatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedCenterNodeAccessServer) RegisterNode(context.Context, *RegisterNodeReq) (*RegisterNodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedCenterNodeAccessServer) mustEmbedUnimplementedCenterNodeAccessServer() {}

// UnsafeCenterNodeAccessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterNodeAccessServer will
// result in compilation errors.
type UnsafeCenterNodeAccessServer interface {
	mustEmbedUnimplementedCenterNodeAccessServer()
}

func RegisterCenterNodeAccessServer(s grpc.ServiceRegistrar, srv CenterNodeAccessServer) {
	s.RegisterService(&CenterNodeAccess_ServiceDesc, srv)
}

func _CenterNodeAccess_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterNodeAccessServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterNodeAccess/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterNodeAccessServer).HeartBeat(ctx, req.(*HeartBeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterNodeAccess_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterNodeAccessServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CenterNodeAccess/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterNodeAccessServer).RegisterNode(ctx, req.(*RegisterNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterNodeAccess_ServiceDesc is the grpc.ServiceDesc for CenterNodeAccess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterNodeAccess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CenterNodeAccess",
	HandlerType: (*CenterNodeAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _CenterNodeAccess_HeartBeat_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _CenterNodeAccess_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_server.proto",
}
